import com.github.tatercertified.MCBuildConfig
import com.github.tatercertified.utils.DependencyBuilder
import com.github.tatercertified.utils.MCGradleBuilder
import java.nio.file.Paths

buildscript() {
    repositories {
        maven {
            url 'https://jitpack.io'
        }
    }
    dependencies {
        classpath 'com.github.Tater-Certified:MultiMCGradle:1.0.0-beta.10'
    }
}

plugins {
    id 'dev.architectury.loom' version '1.10-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
}

apply plugin: 'com.github.tatercertified.multimc'

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'

    base {
        // Set up a suffixed format for the mod jar names, e.g. `example-fabric`.
        archivesName = "$rootProject.archives_name-$project.name"
    }

    repositories {
        mavenCentral()
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }
}

multimc {
    currentMinecraftVer = "1.21.7"
    // If future Minecraft versions should be supported (default: false)
    futureCompatible = true
    // Path where jars should be placed
    outputDir = Paths.get("output")
    // The name of a variable in gradle.properties
    modConfigFileRelativePath = "modConfig"
    // The loader name and where the subproject directory is located
    loaderSpecificPaths = ["fabric": Paths.get("fabric"), "neoforge": Paths.get("neoforge")]
    // The paths to the common code subprojects
    commonDirs = [Paths.get("common")]
    // Specifies how to handle gradle properties between versions
    gradleConfig = new MCBuildConfig((MCGradleBuilder builder) -> {
        builder.mcVer("1.21.0", (DependencyBuilder depBuilder) -> {
            depBuilder.dep("architectury_api_version", "13.0.8") // https://modrinth.com/mod/architectury-api/versions
            depBuilder.dep("minecraft_version", "1.21")
            depBuilder.dep("fabric_permission_version", "0.3.1") // https://modrinth.com/mod/fabric-permissions-api/versions
            depBuilder.dep("fabric_api_version", "0.102.0+1.21") // https://fabricmc.net/develop/
            depBuilder.dep("neoforge_version", "21.0.167")       // https://neoforged.net/
        })
        builder.mcVer("1.21.1", (DependencyBuilder depBuilder) -> {
            depBuilder.depCopy("architectury_api_version", "1.21.0")
            depBuilder.dep("minecraft_version", "1.21.1")
            depBuilder.depCopy("fabric_permission_version", "1.21.0")
            depBuilder.dep("fabric_api_version", "0.116.4+1.21.1")
            depBuilder.dep("neoforge_version", "21.1.192")
        })
        builder.mcVer("1.21.2", (DependencyBuilder depBuilder) -> {
            depBuilder.dep("architectury_api_version", "14.0.4")
            depBuilder.dep("minecraft_version", "1.21.2")
            depBuilder.dep("fabric_permission_version", "0.3.2")
            depBuilder.dep("fabric_api_version", "0.106.1+1.21.2")
            depBuilder.dep("neoforge_version", "21.2.1-beta")
        })
        builder.mcVer("1.21.3", (DependencyBuilder depBuilder) -> {
            depBuilder.depCopy("architectury_api_version", "1.21.2")
            depBuilder.dep("minecraft_version", "1.21.3")
            depBuilder.dep("fabric_permission_version", "0.3.3")
            depBuilder.dep("fabric_api_version", "0.114.1+1.21.3")
            depBuilder.dep("neoforge_version", "21.3.86")
        })
        builder.mcVer("1.21.4", (DependencyBuilder depBuilder) -> {
            depBuilder.dep("architectury_api_version", "16.1.4")
            depBuilder.dep("minecraft_version", "1.21.4")
            depBuilder.depCopy("fabric_permission_version", "1.21.3")
            depBuilder.dep("fabric_api_version", "0.119.3+1.21.4")
            depBuilder.dep("neoforge_version", "21.4.147")
        })
        builder.mcVer("1.21.5", (DependencyBuilder depBuilder) -> {
            depBuilder.dep("architectury_api_version", "13.0.5")
            depBuilder.dep("minecraft_version", "1.21.5")
            depBuilder.depCopy("fabric_permission_version", "1.21.3")
            depBuilder.dep("fabric_api_version", "0.128.1+1.21.5")
            depBuilder.dep("neoforge_version", "21.5.87")
        })
        builder.mcVer("1.21.6", (DependencyBuilder depBuilder) -> {
            depBuilder.dep("architectury_api_version", "17.0.6")
            depBuilder.dep("minecraft_version", "1.21.6")
            depBuilder.dep("fabric_permission_version", "0.4.0")
            depBuilder.dep("fabric_api_version", "0.128.2+1.21.6")
            depBuilder.dep("neoforge_version", "21.6.20-beta")
        })
        builder.mcVer("1.21.7", (DependencyBuilder depBuilder) -> {
            depBuilder.depCopy("architectury_api_version", "1.21.6")
            depBuilder.dep("minecraft_version", "1.21.7")
            depBuilder.depCopy("fabric_permission_version", "1.21.6")
            depBuilder.dep("fabric_api_version", "0.129.0+1.21.7")
            depBuilder.dep("neoforge_version", "21.7.20-beta")
        })
    })
}
